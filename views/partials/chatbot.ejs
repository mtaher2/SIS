<!-- Chatbot Container -->
<div class="chatbot-container">
  <!-- Chat Icon Button -->
  <button class="chatbot-icon" onclick="toggleChat()">
    <i class="fas fa-comments"></i>
  </button>

  <!-- Chat Window -->
  <div class="chat-window" id="chatWindow">
    <div class="chat-header">
      <h3>AI Assistant</h3>
      <button class="close-btn" onclick="toggleChat()">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="chat-messages" id="chatMessages">
      <div class="message bot">
        <div class="message-content">
          Hello! I'm your AI assistant. How can I help you today?
        </div>
      </div>
    </div>
    <div class="chat-input">
      <input
        type="text"
        id="userInput"
        placeholder="Type your message..."
        onkeypress="handleKeyPress(event)"
      />
      <button onclick="sendMessage()">
        <i class="fas fa-paper-plane"></i>
      </button>
    </div>
  </div>
</div>

<!-- Chatbot Styles -->
<style>
  .chatbot-container {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1000;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
  }

  .chatbot-icon {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background-color: #a1d55d;
    border: none;
    color: white;
    font-size: 20px;
    cursor: pointer;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    transition: transform 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    z-index: 1001;
  }

  .chatbot-icon i {
    margin: 0;
    padding: 0;
  }

  .chatbot-icon:hover {
    transform: scale(1.1);
  }

  .chat-window {
    position: fixed;
    bottom: 80px;
    right: 20px;
    width: 380px;
    height: 500px;
    background: white;
    border-radius: 15px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    display: none;
    flex-direction: column;
    z-index: 1000;
  }

  .chat-header {
    padding: 15px;
    background: #a1d55d;
    color: white;
    border-radius: 15px 15px 0 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .chat-header h3 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
  }

  .close-btn {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    font-size: 16px;
    padding: 4px;
  }

  .chat-messages {
    flex-grow: 1;
    padding: 15px;
    overflow-y: auto;
    background-color: #f8f9fa;
  }

  .message {
    margin-bottom: 15px;
    display: flex;
    flex-direction: column;
  }

  .message.user {
    align-items: flex-end;
  }

  .message.bot {
    align-items: flex-start;
  }

  .message-content {
    padding: 10px 15px;
    border-radius: 15px;
    max-width: 85%;
    word-wrap: break-word;
    font-size: 14px;
    line-height: 1.4;
  }

  .message.user .message-content {
    background: #a1d55d;
    color: black;
    border-bottom-right-radius: 5px;
  }

  .message.bot .message-content {
    background: white;
    color: #333;
    border-bottom-left-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }

  .chat-input {
    padding: 15px;
    border-top: 1px solid #eee;
    display: flex;
    gap: 8px;
    background: white;
    border-radius: 0 0 15px 15px;
  }

  .chat-input input {
    flex-grow: 1;
    padding: 8px 15px;
    border: 1px solid #ddd;
    border-radius: 20px;
    outline: none;
    font-size: 14px;
  }

  .chat-input button {
    background: #a1d55d;
    color: white;
    border: none;
    border-radius: 50%;
    width: 35px;
    height: 35px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    font-size: 14px;
  }

  .chat-input button:hover {
    background: #8fc348;
  }

  /* Loading Animation */
  .typing-indicator {
    display: flex;
    align-items: center;
    padding: 15px 20px;
    background: white;
    border-radius: 20px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    align-self: flex-start;
  }

  .typing-indicator span {
    height: 10px;
    width: 10px;
    background: #a1d55d;
    display: inline-block;
    border-radius: 50%;
    margin-right: 5px;
    animation: typing 1s infinite;
  }

  .typing-indicator span:nth-child(2) {
    animation-delay: 0.2s;
  }

  .typing-indicator span:nth-child(3) {
    animation-delay: 0.4s;
    margin-right: 0;
  }

  @keyframes typing {
    0% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-5px);
    }
    100% {
      transform: translateY(0);
    }
  }

  /* Results Table Styling */
  .results-container {
    margin: 15px 0;
    overflow-x: auto;
    max-width: 100%;
    background: white;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }

  .results-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    font-size: 14px;
  }

  .results-table th {
    background-color: #f8f9fa;
    color: #495057;
    font-weight: 600;
    text-align: left;
    padding: 12px 15px;
    border-bottom: 2px solid #dee2e6;
  }

  .results-table td {
    padding: 10px 15px;
    border-bottom: 1px solid #dee2e6;
    color: #212529;
  }

  .results-table tr:last-child td {
    border-bottom: none;
  }

  .results-table tr:hover td {
    background-color: #f8f9fa;
  }

  /* Message Content Styling */
  .message-content {
    padding: 15px 20px;
    border-radius: 20px;
    max-width: 85%;
    word-wrap: break-word;
    font-size: 15px;
    line-height: 1.5;
  }

  .message-content p {
    margin: 0 0 10px 0;
  }

  .message-content p:last-child {
    margin-bottom: 0;
  }

  .message-content ul,
  .message-content ol {
    margin: 10px 0;
    padding-left: 20px;
  }

  .message-content li {
    margin: 5px 0;
  }

  .message-content table {
    margin: 10px 0;
    border-collapse: collapse;
    width: 100%;
  }

  .message-content th,
  .message-content td {
    padding: 8px;
    border: 1px solid #dee2e6;
  }

  .message-content th {
    background-color: #f8f9fa;
  }

  /* Status Messages */
  .status-message {
    font-size: 13px;
    color: #6c757d;
    margin-top: 5px;
    font-style: italic;
  }

  /* Error Message */
  .error-message {
    color: #dc3545;
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    padding: 10px;
    border-radius: 5px;
    margin: 5px 0;
  }

  /* Add new styles for formatted text */
  .message-content strong {
    font-weight: bold;
  }

  .message-content em {
    font-style: italic;
  }

  .message-content code {
    background-color: #f8f9fa;
    padding: 2px 4px;
    border-radius: 4px;
    font-family: "Courier New", Courier, monospace;
    font-size: 0.9em;
  }

  .message-content pre.code-block {
    background-color: #f8f9fa;
    padding: 10px;
    border-radius: 5px;
    overflow-x: auto;
    margin: 5px 0;
    font-family: "Courier New", Courier, monospace;
    font-size: 0.9em;
    border: 1px solid #dee2e6;
    white-space: pre-wrap;
  }

  .message-content br {
    margin-bottom: 5px;
  }

  /* Add chart container styles */
  .chart-container {
    margin: 15px 0;
    padding: 15px;
    background: white;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }

  .chart-container canvas {
    width: 100% !important;
    height: 300px !important;
  }

  .export-buttons {
    margin-top: 10px;
    display: flex;
    gap: 10px;
  }

  .export-buttons button {
    padding: 8px 15px;
    border: none;
    border-radius: 5px;
    background: #007bff;
    color: white;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s ease;
  }

  .export-buttons button:hover {
    background: #0056b3;
  }
</style>

<!-- Chatbot Script -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  // Pass user data from server to client
  const userData = JSON.parse('<%- JSON.stringify(typeof user !== "undefined" ? user : {}) %>');
  
  let chatWindow = document.getElementById("chatWindow");
  let chatMessages = document.getElementById("chatMessages");
  let userInput = document.getElementById("userInput");
  let isProcessing = false;

  // Get user data from the session with proper validation
  const sessionUser = (() => {
    try {
      if (!userData || !userData.role) {
        console.error("Invalid session data");
        return null;
      }
      // Only include necessary non-sensitive data
      return {
        id: userData.user_id,
        role: userData.role,
        roleId: userData.role === "admin" ? 1 : userData.role === "instructor" ? 2 : 3,
        username: userData.username,
        firstName: userData.first_name,
        lastName: userData.last_name
      };
    } catch (error) {
      console.error("Error parsing session data:", error);
      return null;
    }
  })();

  // Enhanced role-based access control configuration
  const rolePermissions = {
    admin: {
      canViewAllStudents: true,
      canViewAllCourses: true,
      canViewAllGrades: true,
      canViewSystemStats: true,
      canManageUsers: true,
      canViewSensitiveData: true
    },
    instructor: {
      canViewAllStudents: false,
      canViewAllCourses: true,
      canViewAllGrades: false,
      canViewSystemStats: false,
      canManageUsers: false,
      canViewSensitiveData: false
    },
    student: {
      canViewAllStudents: false,
      canViewAllCourses: false,
      canViewAllGrades: false,
      canViewSystemStats: false,
      canManageUsers: false,
      canViewSensitiveData: false
    }
  };

  // Enhanced sensitive query patterns
  const sensitiveQueries = {
    passwordPatterns: {
      patterns: [/password/i, /passwords/i, /credentials/i, /login details/i, /account details/i, /security info/i],
      permission: "canViewSensitiveData",
      errorMessage: "I'm sorry, but I cannot provide password or sensitive security information."
    },
    studentPatterns: {
      patterns: [/all students/i, /every student/i, /list students/i, /show students/i, /student list/i, /student roster/i],
      permission: "canViewAllStudents",
      errorMessage: "I'm sorry, but you don't have permission to view all students' information."
    },
    coursePatterns: {
      patterns: [/all courses/i, /every course/i, /list courses/i, /show courses/i, /course list/i, /course catalog/i],
      permission: "canViewAllCourses",
      errorMessage: "I'm sorry, but you don't have permission to view all courses."
    },
    gradePatterns: {
      patterns: [/all grades/i, /every grade/i, /list grades/i, /show grades/i, /grade list/i, /grade report/i],
      permission: "canViewAllGrades",
      errorMessage: "I'm sorry, but you don't have permission to view all grades."
    },
    statsPatterns: {
      patterns: [/system stats/i, /statistics/i, /analytics/i, /dashboard/i, /overview/i],
      permission: "canViewSystemStats",
      errorMessage: "I'm sorry, but you don't have permission to view system statistics."
    }
  };

  // Validate user session
  function validateSession() {
    if (!sessionUser) {
      console.error("No valid session data found");
      return false;
    }
    return true;
  }

  // Check if user is authenticated
  function isAuthenticated() {
    return validateSession();
  }

  // Check if user has specific permission
  function hasPermission(permission) {
    if (!isAuthenticated()) {
      return false;
    }
    return rolePermissions[sessionUser.role][permission] || false;
  }

  // Validate query against sensitive patterns
  function validateQuery(message) {
    if (!isAuthenticated()) {
      return {
        isValid: false,
        errorMessage: "Please log in to use the chatbot."
      };
    }

    for (const [category, config] of Object.entries(sensitiveQueries)) {
      for (const pattern of config.patterns) {
        if (pattern.test(message)) {
          if (!hasPermission(config.permission)) {
            return {
              isValid: false,
              errorMessage: config.errorMessage
            };
          }
        }
      }
    }

    return { isValid: true };
  }

  // Toggle chat window visibility
  function toggleChat() {
    if (!isAuthenticated()) {
      alert("Please log in to use the chatbot");
      return;
    }
    chatWindow.style.display = chatWindow.style.display === "none" ? "flex" : "none";
    if (chatWindow.style.display === "flex") {
      userInput.focus();
    }
  }

  // Handle Enter key press
  function handleKeyPress(event) {
    if (event.key === "Enter" && !isProcessing) {
      sendMessage();
    }
  }

  // Show typing indicator
  function showTypingIndicator() {
    const indicator = document.createElement("div");
    indicator.className = "typing-indicator";
    indicator.innerHTML = "<span></span><span></span><span></span>";
    indicator.id = "typingIndicator";
    chatMessages.appendChild(indicator);
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  // Remove typing indicator
  function removeTypingIndicator() {
    const indicator = document.getElementById("typingIndicator");
    if (indicator) {
      indicator.remove();
    }
  }

  // Format message text with markdown-like syntax
  function formatMessage(text) {
    if (!text) return "";

    // Replace newlines with <br>
    text = text.replace(/\n/g, "<br>");

    // Handle bold text (**text**)
    text = text.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>");

    // Handle italic text (*text*)
    text = text.replace(/\*(.*?)\*/g, "<em>$1</em>");

    // Handle code blocks (```code```)
    text = text.replace(/```([\s\S]*?)```/g, '<pre class="code-block">$1</pre>');

    // Handle inline code (`code`)
    text = text.replace(/`([^`]+)`/g, "<code>$1</code>");

    // Handle lists
    text = text.replace(/^\s*[-*]\s+(.+)$/gm, "<li>$1</li>");
    text = text.replace(/(<li>.*<\/li>)/s, "<ul>$1</ul>");

    // Handle numbered lists
    text = text.replace(/^\s*\d+\.\s+(.+)$/gm, "<li>$1</li>");
    text = text.replace(/(<li>.*<\/li>)/s, "<ol>$1</ol>");

    return text;
  }

  // Create chart
  function createChart(data, type = "bar") {
    const chartContainer = document.createElement("div");
    chartContainer.className = "chart-container";

    const canvas = document.createElement("canvas");
    chartContainer.appendChild(canvas);

    // Add export buttons
    const exportButtons = document.createElement("div");
    exportButtons.className = "export-buttons";
    exportButtons.innerHTML = `
      <button onclick="exportToExcel(this)">Export to Excel</button>
      <button onclick="downloadChart(this)">Download Chart</button>
    `;
    chartContainer.appendChild(exportButtons);

    // Create chart
    const ctx = canvas.getContext("2d");
    const chart = new Chart(ctx, {
      type: type,
      data: {
        labels: data.labels,
        datasets: data.datasets
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: "top"
          },
          title: {
            display: true,
            text: data.title || "Data Visualization"
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              stepSize: 1
            }
          }
        }
      }
    });

    return chartContainer;
  }

  // Export data to Excel
  function exportToExcel(button) {
    const chartContainer = button.closest(".chart-container");
    const canvas = chartContainer.querySelector("canvas");
    const chart = Chart.getChart(canvas);

    if (!chart) return;

    const data = chart.data;
    let csvContent = "data:text/csv;charset=utf-8,";

    // Add headers
    csvContent += data.labels.join(",") + "\n";

    // Add data rows
    data.datasets.forEach((dataset) => {
      csvContent += dataset.label + "," + dataset.data.join(",") + "\n";
    });

    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "chart_data.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  // Download chart as image
  function downloadChart(button) {
    const chartContainer = button.closest(".chart-container");
    const canvas = chartContainer.querySelector("canvas");

    const link = document.createElement("a");
    link.download = "chart.png";
    link.href = canvas.toDataURL("image/png");
    link.click();
  }

  // Add message to chat
  function addMessage(message, sender, sqlQuery = null, results = null) {
    const messageDiv = document.createElement("div");
    messageDiv.className = `message ${sender}`;

    const contentDiv = document.createElement("div");
    contentDiv.className = "message-content";

    // Add the main message with formatting
    contentDiv.innerHTML = formatMessage(message);

    // Handle results
    if (results) {
      if (results.chartData) {
        const chartContainer = createChart(results.chartData, results.chartType || "bar");
        contentDiv.appendChild(chartContainer);
      } else {
        contentDiv.innerHTML += formatResults(results);
      }
    }

    messageDiv.appendChild(contentDiv);
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  // Format results for display
  function formatResults(results) {
    if (!results || !results.length) return "";

    let html = '<div class="results-container">';
    html += '<table class="results-table">';

    // Add header row
    html += "<thead><tr>";
    for (const key in results[0]) {
      const headerText = key
        .split("_")
        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
        .join(" ");
      html += `<th>${headerText}</th>`;
    }
    html += "</tr></thead>";

    // Add data rows
    html += "<tbody>";
    results.forEach((row) => {
      html += "<tr>";
      for (const key in row) {
        const value = row[key];
        let formattedValue = value;
        if (value === null || value === undefined) {
          formattedValue = "-";
        } else if (typeof value === "boolean") {
          formattedValue = value ? "Yes" : "No";
        } else if (value instanceof Date) {
          formattedValue = value.toLocaleDateString();
        }
        html += `<td>${formattedValue}</td>`;
      }
      html += "</tr>";
    });
    html += "</tbody></table></div>";
    return html;
  }

  // Enhanced sendMessage function with better security
  async function sendMessage() {
    const message = userInput.value.trim();
    if (!message || isProcessing) return;

    if (!isAuthenticated()) {
      alert("Please log in to use the chatbot");
      return;
    }

    // Enhanced query validation
    const validation = validateQuery(message);
    if (!validation.isValid) {
      addMessage(validation.errorMessage, "bot");
      userInput.value = "";
      return;
    }

    isProcessing = true;
    userInput.disabled = true;

    // Add user message to chat
    addMessage(message, "user");
    userInput.value = "";
    showTypingIndicator();

    try {
      const response = await fetch("http://localhost:5002/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]')?.content || ""
        },
        body: JSON.stringify({
          question: message,
          role_id: sessionUser.roleId,
          user_id: sessionUser.id,
          role: sessionUser.role,
          username: sessionUser.username,
          firstName: sessionUser.firstName,
          lastName: sessionUser.lastName
        })
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "Failed to get response from chatbot");
      }

      removeTypingIndicator();

      // Sanitize response data before displaying
      const sanitizedData = sanitizeResponseData(data);

      // Handle the response
      if (sanitizedData.raw_results && sanitizedData.raw_results.chartData) {
        addMessage(sanitizedData.answer, "bot", null, sanitizedData.raw_results);
      } else if (sanitizedData.raw_results && sanitizedData.raw_results.length > 0) {
        addMessage(sanitizedData.answer, "bot", null, sanitizedData.raw_results);
      } else {
        addMessage(sanitizedData.answer, "bot");
      }
    } catch (error) {
      console.error("Error:", error);
      removeTypingIndicator();

      let errorMessage = "Sorry, I encountered an error. ";
      if (error.message) {
        errorMessage += error.message;
      } else {
        errorMessage += "Please try again.";
      }

      addMessage(errorMessage, "bot");
    } finally {
      isProcessing = false;
      userInput.disabled = false;
      userInput.focus();
    }
  }

  // Add new function to sanitize response data
  function sanitizeResponseData(data) {
    if (!data) return data;

    const sanitized = { ...data };

    // Remove sensitive fields from raw results
    if (sanitized.raw_results) {
      if (Array.isArray(sanitized.raw_results)) {
        sanitized.raw_results = sanitized.raw_results.map((result) => {
          const sanitizedResult = { ...result };
          // Remove sensitive fields
          delete sanitizedResult.password;
          delete sanitizedResult.password_hash;
          delete sanitizedResult.security_question;
          delete sanitizedResult.security_answer;
          delete sanitizedResult.api_key;
          delete sanitizedResult.token;
          return sanitizedResult;
        });
      } else if (typeof sanitized.raw_results === "object") {
        delete sanitized.raw_results.password;
        delete sanitized.raw_results.password_hash;
        delete sanitized.raw_results.security_question;
        delete sanitized.raw_results.security_answer;
        delete sanitized.raw_results.api_key;
        delete sanitized.raw_results.token;
      }
    }

    return sanitized;
  }
</script>
