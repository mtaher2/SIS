<div class="container mt-4">
    <div class="row mb-4">
        <div class="col-md-8">
            <h1 class="mb-2">Edit Page</h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/instructor/courses">My Courses</a></li>
                    <li class="breadcrumb-item"><a href="/instructor/courses/<%= course.course_id %>"><%= course.title %></a></li>
                    <li class="breadcrumb-item"><a href="/instructor/courses/<%= course.course_id %>/modules">Modules</a></li>
                    <li class="breadcrumb-item"><a href="/instructor/modules/<%= module.module_id %>/pages">Pages</a></li>
                    <li class="breadcrumb-item"><a href="/instructor/modules/<%= module.module_id %>/pages/<%= page.page_id %>"><%= page.title %></a></li>
                    <li class="breadcrumb-item active">Edit</li>
                </ol>
            </nav>
        </div>
        <div class="col-md-4 text-end">
            <a href="/instructor/modules/<%= module.module_id %>/pages/<%= page.page_id %>" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-1"></i> Back to Page
            </a>
        </div>
    </div>

    <div class="card">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0"><i class="fas fa-edit me-2"></i> Edit Page</h5>
        </div>
        <div class="card-body">
            <form id="pageForm" action="/instructor/modules/<%= module.module_id %>/pages/<%= page.page_id %>?_method=PUT" method="POST">
                <div class="mb-3">
                    <label for="title" class="form-label">Page Title</label>
                    <input type="text" class="form-control" id="title" name="title" value="<%= page.title %>" required>
                    <div class="form-text">This will be displayed as the page heading.</div>
                </div>
                
                <div class="mb-3">
                    <label for="editor-container" class="form-label">Page Content</label>
                    <!-- Hidden textarea to store the HTML content -->
                    <textarea id="content" name="content" style="display: none;"><%= page.content %></textarea>
                    <!-- Quill editor container -->
                    <div id="editor-container" style="height: 400px; border: 1px solid #ccc; border-radius: 4px;"></div>
                </div>
                
                <div class="form-check mb-3">
                    <input class="form-check-input" type="checkbox" id="published" name="published" value="true" <%= page.published ? 'checked' : '' %>>
                    <label class="form-check-label" for="published">
                        Published
                    </label>
                </div>
                
                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-1"></i> Save Changes
                    </button>
                    <a href="/instructor/modules/<%= module.module_id %>/pages/<%= page.page_id %>" class="btn btn-outline-secondary">
                        Cancel
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Include Quill.js library and styles -->
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const initialContent = document.getElementById('content').value;
        
        // Define custom blot for file attachments
        const Inline = Quill.import('blots/inline');
        const BlockEmbed = Quill.import('blots/block/embed');
        
        class FileBlot extends Inline {
            static create(value) {
                const node = super.create();
                node.setAttribute('href', value.url);
                node.setAttribute('target', '_blank');
                node.setAttribute('rel', 'noopener noreferrer');
                node.setAttribute('class', 'file-attachment');
                
                // Create file icon based on extension
                let fileIcon = 'fa-file';
                if (value.type === 'pdf') fileIcon = 'fa-file-pdf';
                else if (['doc', 'docx'].includes(value.type)) fileIcon = 'fa-file-word';
                else if (['ppt', 'pptx'].includes(value.type)) fileIcon = 'fa-file-powerpoint';
                else if (['xls', 'xlsx'].includes(value.type)) fileIcon = 'fa-file-excel';
                else if (['zip'].includes(value.type)) fileIcon = 'fa-file-archive';
                
                node.innerHTML = `<i class="fas ${fileIcon} me-1"></i>${value.name}`;
                return node;
            }
            
            static value(node) {
                return {
                    url: node.getAttribute('href'),
                    name: node.innerText,
                    type: node.getAttribute('data-filetype')
                };
            }
        }
        
        FileBlot.blotName = 'file';
        FileBlot.tagName = 'a';
        
        // Define custom blot for YouTube videos
        class VideoBlot extends BlockEmbed {
            static create(value) {
                const node = super.create();
                // Set responsive wrapper
                node.setAttribute('class', 'embed-responsive embed-responsive-16by9');
                
                // Extract YouTube video ID if full URL is provided
                let videoId = value;
                if (value.includes('youtube.com') || value.includes('youtu.be')) {
                    // Handle youtube.com/watch?v=ID format
                    const urlParams = new URLSearchParams(new URL(value).search);
                    const idFromParams = urlParams.get('v');
                    if (idFromParams) {
                        videoId = idFromParams;
                    } else {
                        // Handle youtu.be/ID format
                        const pathname = new URL(value).pathname;
                        videoId = pathname.split('/').pop();
                    }
                }
                
                // Create iframe for YouTube embed
                node.innerHTML = `<iframe class="embed-responsive-item" src="https://www.youtube.com/embed/${videoId}" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>`;
                return node;
            }
            
            static value(node) {
                const iframe = node.querySelector('iframe');
                if (iframe) {
                    const src = iframe.getAttribute('src');
                    // Extract video ID from embed URL
                    const match = src.match(/embed\/([^?]+)/);
                    return match ? match[1] : '';
                }
                return '';
            }
        }
        
        VideoBlot.blotName = 'video';
        VideoBlot.tagName = 'div';
        
        Quill.register(FileBlot);
        Quill.register(VideoBlot);
        
        // Initialize Quill editor
        const quill = new Quill('#editor-container', {
            modules: {
                toolbar: [
                    [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                    ['bold', 'italic', 'underline', 'strike'],
                    [{ 'color': [] }, { 'background': [] }],
                    [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                    [{ 'align': [] }],
                    ['link', 'image', 'file', 'video'],
                    ['clean']
                ]
            },
            theme: 'snow'  // or 'bubble'
        });
        
        // Set initial content
        quill.root.innerHTML = initialContent;
        
        // Custom toolbar button for file uploads
        const toolbar = quill.getModule('toolbar');
        
        // Add YouTube video handler
        toolbar.addHandler('video', function() {
            const value = prompt('Enter YouTube video URL or video ID:');
            if (value) {
                const range = quill.getSelection(true);
                quill.insertEmbed(range.index, 'video', value);
                quill.setSelection(range.index + 1);
            }
        });
        
        // Add file handler (will be used for non-image files)
        toolbar.addHandler('file', function() {
            const input = document.createElement('input');
            input.setAttribute('type', 'file');
            input.setAttribute('accept', '.pdf,.doc,.docx,.ppt,.pptx,.xls,.xlsx,.txt,.csv,.zip');
            input.click();
            
            input.onchange = function() {
                const file = input.files[0];
                if (file) {
                    handleFileUpload(file, false);
                }
            };
        });
        
        // Handle image uploads with modified approach
        toolbar.addHandler('image', function() {
            const input = document.createElement('input');
            input.setAttribute('type', 'file');
            input.setAttribute('accept', 'image/*');
            input.click();
            
            input.onchange = function() {
                const file = input.files[0];
                if (file) {
                    handleFileUpload(file, true);
                }
            };
        });
        
        // Common file upload handler for both images and other file types
        function handleFileUpload(file, isImage) {
            // Create a FormData instance
            const formData = new FormData();
            formData.append('file', file);
            
            // Show loading indicator in editor
            const range = quill.getSelection(true);
            quill.insertText(range.index, 'Uploading file...');
            
            // Upload to server
            fetch('/api/upload', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(result => {
                // Delete the placeholder text
                quill.deleteText(range.index, 'Uploading file...'.length);
                
                if (result.success) {
                    if (isImage && result.isEmbeddableImage) {
                        // Insert image as before
                        quill.insertEmbed(range.index, 'image', result.location);
                    } else {
                        // Insert file attachment link
                        quill.insertEmbed(range.index, 'file', {
                            url: result.location,
                            name: result.fileName,
                            type: result.fileType
                        });
                        // Move cursor after the embed
                        quill.setSelection(range.index + 1);
                    }
                } else {
                    // Display error message
                    quill.insertText(range.index, 'Error uploading file', { 'color': '#e74c3c', 'italic': true });
                }
            })
            .catch(error => {
                console.error('Error uploading file:', error);
                // Replace the placeholder with error message
                quill.deleteText(range.index, 'Uploading file...'.length);
                quill.insertText(range.index, 'Error uploading file', { 'color': '#e74c3c', 'italic': true });
            });
        }
        
        // Update hidden form field before submission
        const form = document.getElementById('pageForm');
        form.onsubmit = function() {
            // Get editor content and update hidden textarea
            const content = document.getElementById('content');
            content.value = quill.root.innerHTML;
            
            // Simple validation
            const title = document.getElementById('title').value.trim();
            if (!title) {
                alert('Please enter a page title');
                return false;
            }
            
            return true;
        };
    });
</script> 